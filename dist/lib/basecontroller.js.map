{"version":3,"sources":["../../src/lib/basecontroller.js"],"names":["module","exports","service","entity","meta","req","res","next","validations","__","_","keys","unDefined","get","k","status","send","errCode","errMsg","inParams","logParams","params","each","v","path","value","optional","push","type","isArray","email","p","opName","promise","resolve","then","callback","result","log","logger","info","originalUrl","jStr","op","end","json","err","exec","set","id"],"mappings":"AAAA;;;;AAEA;;;;;;;;AAEAA,OAAOC,OAAP;AACI,4BAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AAAA;;AACzB,aAAKD,OAAL,GAAeA,OAAf;AACA,aAAKC,MAAL,GAAcA,MAAd;AACH;;AAJL;AAAA;AAAA,6BAMSC,IANT,EAMe;AAAA;;AACP,mBAAO,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAAA;;AACvB,oBAAIH,KAAKI,WAAT,EACIC,eAAGC,CAAH,CAAKC,IAAL,CAAUP,KAAKI,WAAf,EAA4B,aAAK;AAC7B,wBAAIC,eAAGG,SAAH,CAAaH,eAAGC,CAAH,CAAKG,GAAL,CAASR,GAAT,EAAcS,CAAd,CAAb,CAAJ,EACI,OAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,iCAAS,KADe;AAExBC,gCAASb,IAAIS,CAAJ,KAAUT,IAAIS,CAAJ,EAAOI,MAAlB,GAA4Bb,IAAIS,CAAJ,EAAOI,MAAnC,GAA6C,8BAA8BJ;AAF3D,qBAArB,CAAP;AAIP,iBAND;;AAQJ,oBAAIK,WAAW,EAAf;AAAA,oBACIC,YAAY,EADhB;AAEA,oBAAIhB,KAAKiB,MAAT,EAAiB;AACbZ,mCAAGC,CAAH,CAAKY,IAAL,CAAUlB,KAAKiB,MAAf,EAAuB,aAAK;AACxB,4BAAME,IAAIT,EAAEU,IAAF,GAASf,eAAGC,CAAH,CAAKG,GAAL,CAASR,GAAT,EAAcS,EAAEU,IAAhB,CAAT,GAAiCV,EAAEW,KAA7C;AACA,4BAAIhB,eAAGG,SAAH,CAAaW,CAAb,KAAmB,CAACT,EAAEY,QAA1B,EACI,OAAOpB,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qCAAS,KADe;AAExBC,oCAAS,8BAA8BJ,EAAEU;AAFjB,yBAArB,CAAP;AAIJL,iCAASQ,IAAT,CAAcb,EAAEc,IAAF,KAAW,OAAX,GAAsBnB,eAAGC,CAAH,CAAKmB,OAAL,CAAaN,CAAb,IAAkBA,CAAlB,GAAsB,CAACA,CAAD,CAA5C,GAAmDA,CAAjE;AACAH,kCAAUN,EAAEU,IAAZ,IAAsBV,EAAEU,IAAF,KAAW,MAAZ,IAAuBD,CAAxB,GAA6BA,EAAEO,KAA/B,GAAuCP,CAA3D;AACH,qBATD;AAUH;;AAED,oBAAIQ,IAAI3B,KAAK4B,MAAL,GAAc,kBAAK9B,OAAL,EAAaE,KAAK4B,MAAlB,kBAA6Bb,QAA7B,CAAd,GAAuDV,eAAGwB,OAAH,CAAWC,OAAX,CAAmB,IAAnB,CAA/D;AACAH,kBAAEI,IAAF,CAAO,kBAAU;AACb,wBAAI/B,KAAKgC,QAAT,EAAmBC,SAASjC,KAAKgC,QAAL,CAAc/B,GAAd,EAAmBC,GAAnB,EAAwB+B,MAAxB,CAAT;AACnBjC,yBAAKkC,GAAL,IAAY7B,eAAG8B,MAAH,CAAUC,IAAV,CAAe,qBAAqBnC,IAAIoC,WAAzB,GAAuC,KAAvC,GAA+ChC,eAAGiC,IAAH,CAAQ;AAC9EC,4BAAIvC,KAAK4B,MADqE;AAE9EX,gCAAQD;AAFsE,qBAAR,CAA9D,CAAZ;AAIA,2BAAO,CAACiB,MAAD,GAAU/B,IAAIS,MAAJ,CAAW,GAAX,EAAgB6B,GAAhB,EAAV,GAAkCtC,IAAIuC,IAAJ,CAASR,MAAT,CAAzC;AACH,iBAPD,EAOG,eAAO;AACNjC,yBAAKkC,GAAL,IAAY7B,eAAG8B,MAAH,CAAUC,IAAV,CAAe,kBAAkBnC,IAAIoC,WAAtB,GAAoC,KAApC,GAA4ChC,eAAGiC,IAAH,CAAQ;AAC3EC,4BAAIvC,KAAK4B,MADkE;AAE3EX,gCAAQD,SAFmE;AAG3E0B,6BAAKA;AAHsE,qBAAR,CAA3D,CAAZ;AAKA,2BAAOvC,KAAKuC,GAAL,CAAP;AACH,iBAdD;AAeH,aAzCD;AA0CH;AAjDL;AAAA;AAAA,mCAkDe;AACP,mBAAO,KAAKC,IAAL,CAAU;AACb1B,wBAAQ,CAAC,EAAEG,MAAM,WAAR,EAAD,CADK;AAEbQ,wBAAQ;AAFK,aAAV,CAAP;AAIH;AAvDL;AAAA;AAAA,iCAyDa;AAAA;;AACL,mBAAO,KAAKe,IAAL,CAAU;AACb1B,wBAAQ,CAAC,EAAEG,MAAM,MAAR,EAAD,CADK;AAEbQ,wBAAQ,QAFK;AAGbM,qBAAK,IAHQ;AAIbF,0BAAU,kBAAC/B,GAAD,EAAMC,GAAN,EAAW+B,MAAX,EAAsB;AAC5B/B,wBAAI0C,GAAJ,CAAQ,UAAR,EAAoB,MAAM,OAAK7C,MAAX,GAAoB,GAApB,GAA0BkC,OAAOY,EAArD;AACA,2BAAOZ,MAAP;AACH;AAPY,aAAV,CAAP;AASH;AAnEL;AAAA;AAAA,iCAqEa;AACL,mBAAO,KAAKU,IAAL,CAAU;AACbvC,6BAAa;AACT,kCAAc;AACVU,gCAAQ;AADE;AADL,iBADA;AAMbG,wBAAQ,CAAC,EAAEG,MAAM,MAAR,EAAD,CANK;AAObQ,wBAAQ,QAPK;AAQbM,qBAAK;AARQ,aAAV,CAAP;AAUH;AAhFL;;AAAA;AAAA","file":"basecontroller.js","sourcesContent":["'use strict';\n\nimport __ from './util';\n\nmodule.exports = class BaseController {\n    constructor(service, entity) {\n        this.service = service\n        this.entity = entity\n    }\n\n    exec(meta) {\n        return (req, res, next) => {\n            if (meta.validations)\n                __._.keys(meta.validations, k => {\n                    if (__.unDefined(__._.get(req, k)))\n                        return res.status(404).send({\n                            errCode: '000',\n                            errMsg: (req[k] && req[k].errMsg) ? req[k].errMsg : (\"Invalid value for path : \" + k)\n                        });\n                })\n\n            let inParams = [],\n                logParams = {};\n            if (meta.params) {\n                __._.each(meta.params, k => {\n                    const v = k.path ? __._.get(req, k.path) : k.value\n                    if (__.unDefined(v) && !k.optional)\n                        return res.status(404).send({\n                            errCode: '000',\n                            errMsg: (\"Invalid value for path : \" + k.path)\n                        });\n                    inParams.push(k.type === 'array' ? (__._.isArray(v) ? v : [v]) : v)\n                    logParams[k.path] = ((k.path === 'user') && v) ? v.email : v\n                })\n            }\n\n            let p = meta.opName ? this.service[meta.opName](...inParams) : __.promise.resolve(true)\n            p.then(result => {\n                if (meta.callback) result = meta.callback(req, res, result)\n                meta.log && __.logger.info(\"--- API success \" + req.originalUrl + \" : \" + __.jStr({\n                    op: meta.opName,\n                    params: logParams\n                }))\n                return !result ? res.status(404).end() : res.json(result);\n            }, err => {\n                meta.log && __.logger.info(\"--- API fail \" + req.originalUrl + \" : \" + __.jStr({\n                    op: meta.opName,\n                    params: logParams,\n                    err: err\n                }))\n                return next(err);\n            })\n        }\n    }\n    findById() {\n        return this.exec({\n            params: [{ path: 'params.id' }],\n            opName: 'findById'\n        })\n    }\n\n    create() {\n        return this.exec({\n            params: [{ path: 'body' }],\n            opName: 'create',\n            log: true,\n            callback: (req, res, result) => {\n                res.set('Location', '/' + this.entity + '/' + result.id);\n                return result;\n            }\n        })\n    }\n\n    search() {\n        return this.exec({\n            validations: {\n                'body.query': {\n                    errMsg: 'query criteria missing'\n                }\n            },\n            params: [{ path: 'body' }],\n            opName: 'search',\n            log: true\n        })\n    }\n}"]}