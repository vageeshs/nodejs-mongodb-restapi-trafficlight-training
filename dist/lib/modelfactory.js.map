{"version":3,"sources":["../../src/lib/modelfactory.js"],"names":["module","exports","createModel","ctx","mSchema","__","mongoose","Schema","struct","minimize","_","isNull","virtual","get","_id","toHexString","options","toObject","virtuals","toJSON","statics","findById","id","findAsync","then","result","length","logErr","jStr","query","err","create","saveAsync","entJ","model"],"mappings":"AAAA;;AACA;;;;;;AAEAA,OAAOC,OAAP,CAAeC,WAAf,GAA6B,UAACC,GAAD,EAAS;AAClC,QAAIC,UAAU,IAAIC,eAAGC,QAAH,CAAYC,MAAhB,CAAuBJ,IAAIK,MAA3B,EAAmC;AAC7CC,kBAAUJ,eAAGK,CAAH,CAAKC,MAAL,CAAYR,IAAIM,QAAhB,IAA4B,IAA5B,GAAmC;AADA,KAAnC,CAAd;;AAIA;AACAL,YAAQQ,OAAR,CAAgB,IAAhB,EAAsBC,GAAtB,CAA0B,YAAW;AACjC,eAAO,KAAKC,GAAL,CAASC,WAAT,EAAP;AACH,KAFD;;AAIAX,YAAQY,OAAR,CAAgBC,QAAhB,GAA2Bd,IAAIc,QAAJ,IAAgB;AACvCC,kBAAU;AAD6B,KAA3C;AAGAd,YAAQY,OAAR,CAAgBG,MAAhB,GAAyBhB,IAAIgB,MAAJ,IAAc;AACnCD,kBAAU;AADyB,KAAvC;;AAIA;AACAd,YAAQgB,OAAR,CAAgBC,QAAhB,GAA2B,UAASC,EAAT,EAAa;AACpC,eAAO,KAAKC,SAAL,CAAe,EAAET,KAAKQ,EAAP,EAAf,EAA4BE,IAA5B,CAAiC,kBAAU;AAC9C,gBAAIC,UAAUA,OAAOC,MAAP,GAAgB,CAA9B,EAAiC,OAAOD,MAAP,CAAjC,KACK,OAAO,IAAP;AACR,SAHM,EAGJ,eAAO;AACNpB,2BAAGsB,MAAH,CAAU,uBAAuBtB,eAAGuB,IAAH,CAAQC,KAAR,CAAjC,EAAiDC,GAAjD;AACA,kBAAMA,GAAN;AACH,SANM,CAAP;AAOH,KARD;;AAUA1B,YAAQgB,OAAR,CAAgBW,MAAhB,GAAyB,gBAAQ;AAC7B,eAAO,UAAKC,SAAL,GAAiBR,IAAjB,CAAsB,gBAAQ;AACjC,mBAAOS,IAAP;AACH,SAFM,EAEJ,eAAO;AACN5B,2BAAGsB,MAAH,CAAU,oCAAoCO,MAAMZ,EAAN,IAAYY,MAAMpB,GAAtD,CAAV,EAAsEgB,GAAtE;AACA,kBAAMA,GAAN;AACH,SALM,CAAP;AAMH,KAPD;;AASA,WAAO1B,OAAP;AACH,CAtCD","file":"modelfactory.js","sourcesContent":["'use strict';\nimport __ from './util';\n\nmodule.exports.createModel = (ctx) => {\n    let mSchema = new __.mongoose.Schema(ctx.struct, {\n        minimize: __._.isNull(ctx.minimize) ? true : false\n    });\n\n    // To avoid conflic with elasticsearch _id\n    mSchema.virtual('id').get(function() {\n        return this._id.toHexString();\n    });\n\n    mSchema.options.toObject = ctx.toObject || {\n        virtuals: true\n    };\n    mSchema.options.toJSON = ctx.toJSON || {\n        virtuals: true\n    };\n\n    /** NOTE : findById will be from DB **/\n    mSchema.statics.findById = function(id) {\n        return this.findAsync({ _id: id }).then(result => {\n            if (result && result.length > 0) return result;\n            else return null;\n        }, err => {\n            __.logErr(\"DB fetch errored :\" + __.jStr(query), err)\n            throw err;\n        });\n    }\n\n    mSchema.statics.create = entJ => {\n        return this.saveAsync().then(entJ => {\n            return entJ;\n        }, err => {\n            __.logErr(\"Entity save threw error, id : \" + (model.id || model._id), err);\n            throw err;\n        });\n    }\n\n    return mSchema;\n}"]}